---
# tasks file for monitoring

- name: Install Docker
  package:
    name: 
      - docker
    state: present
  become: yes

- name: Create docker-compose directory 
  file: 
    path: /usr/local/bin
    state: directory
    mode: "0755"

- name: download docker-compose 
  get_url:
    url: "https://github.com/docker/compose/releases/download/v2.39.2/docker-compose-linux-x86_64"
    dest: /usr/local/bin/docker-compose
    mode: "0755"
  become: yes

- name: create Sym link for docker-compose
  file:
    src: /usr/local/bin/docker-compose
    dest: /usr/bin/docker-compose
    state: link
  become: yes  

- name: Start and enable docker service
  service:
    name: docker
    state: started
    enabled: yes
  become: yes

- name: Create Monitoring directory
  file: 
    path: "{{ item }}"
    state: directory
    mode: "0755"
  with_items:
    - "{{ monitoring_dir }}"
    - "{{ monitoring_dir }}/prometheus"
    - "{{ monitoring_dir }}/prometheus/data"
    - "{{ monitoring_dir }}/grafana"
  become: yes

- name: Copy docker-compose file
  template:
    src: docker-compose.yml.j2
    dest: /opt/monitoring/docker-compose.yml
  become: yes

- name: Copy Prometheus config
  template:
    src: prometheus.yml.j2
    dest: /opt/monitoring/prometheus/prometheus.yml
  become: yes

- name: Stop existing monitoring container
  shell: |
    cd {{ monitoring_dir }}
    docker-compose down 
  ignore_errors: yes

- name: Start the monitoring container
  shell: |
    cd {{ monitoring_dir }}
    docker-compose up -d --build
  become: yes
  

- name: Wait for service to be up
  wait_for:
    host: localhost
    port: "{{ item }}"
    timeout: 300
  with_items: 
    - 9090 # Prometheus
    - 3000 # Grafana
    - 9100 # Node Exporter

- name: Show Service status
  shell: docker-compose ps
  args: 
    chdir: "{{ monitoring_dir }}"
  register: service_status
  become: yes

- name: Debug service service_status
  debug:
    var: service_status.stdout_lines

- name: wait for grafana to be ready 
  uri:
    url: "http://localhost:3000/api/health"
    status_code: 200
  register: result
  until: result.status == 200
  retries: 60
  delay: 1

- name: configure prometheus data source.
  become: yes
  uri:
    url: "http://localhost:3000/api/datasources"
    method: POST
    user: admin
    password: "{{ grafana_admin_password }}"
    force_basic_auth: yes
    body_format: json 
    body:
      name: "Prometheus"
      type: "prometheus"
      url: "http://promethus:9090"
      access: "proxy"
      isDefault: true
    status_code: [200, 409]  # 409 if datasource already exists
  


